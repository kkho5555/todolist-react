{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["persistAtom","recoilPersist","Categories","categoryState","atom","key","default","TO_DO","effects_UNSTABLE","customCategoryState","toDoState","toDoSelector","selector","get","_ref","toDos","category","filter","toDo","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","_useForm","useForm","register","handleSubmit","setValue","_jsxs","onSubmit","oldToDos","text","id","Date","now","concat","_toConsumableArray","children","_jsx","_objectSpread","required","placeholder","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","DOING","DONE","CustomCategory","_useRecoilState","useRecoilState","_useRecoilState2","_slicedToArray","customCategories","setCustomCategories","_useState","useState","_useState2","newCategory","setNewCategory","preventDefault","type","value","onChange","target","ToDoList","_useRecoilState3","_useRecoilState4","setCategory","includes","map","GlobalStyle","createGlobalStyle","_templateObject","_taggedTemplateLiteral","props","theme","bgColor","textColor","App","_Fragment","ReactDOM","render","React","StrictMode","RecoilRoot","ThemeProvider","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.27c9415a.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\nimport { recoilPersist } from \"recoil-persist\";\n\nconst { persistAtom } = recoilPersist();\nexport enum Categories {\n    \"TO_DO\" = \"TO_DO\",\n    \"DOING\" = \"DOING\",\n    \"DONE\" = \"DONE\",\n}\nexport interface IToDo {\n    text: string;\n    id: number;\n    category: Categories;\n}\n\nexport const categoryState = atom<Categories>({\n    key: \"category\",\n    default: Categories.TO_DO,\n    effects_UNSTABLE: [persistAtom],\n});\n\nexport const customCategoryState = atom<string[]>({\n    key: \"customCategory\",\n    default: [],\n});\n\nexport const toDoState = atom<IToDo[]>({\n    key: \"toDo\",\n    default: [],\n    effects_UNSTABLE: [persistAtom],\n});\n\nexport const toDoSelector = selector({\n    key: \"toDoSelector\",\n    get: ({ get }) => {\n        const toDos = get(toDoState);\n        const category = get(categoryState);\n        return toDos.filter((toDo) => toDo.category === category);\n    },\n});\n","import { useForm } from \"react-hook-form\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { categoryState, toDoState } from \"../atoms\";\n\ninterface IForm {\n  toDo: string;\n}\n\nfunction CreateToDo() {\n  const setToDos = useSetRecoilState(toDoState);\n  const category = useRecoilValue(categoryState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const handleValid = ({ toDo }: IForm) => {\n    setToDos((oldToDos) => [\n      { text: toDo, id: Date.now(), category },\n      ...oldToDos,\n    ]);\n    setValue(\"toDo\", \"\");\n  };\n  return (\n    <form onSubmit={handleSubmit(handleValid)}>\n      <input\n        {...register(\"toDo\", {\n          required: \"Please write a To Do\",\n        })}\n        placeholder=\"Write a to do\"\n      />\n      <button>Add</button>\n    </form>\n  );\n}\n\nexport default CreateToDo;\n","import React from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport { Categories, IToDo, toDoState } from \"../atoms\";\n\nfunction ToDo({ text, category, id }: IToDo) {\n  const setToDos = useSetRecoilState(toDoState);\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const {\n      currentTarget: { name },\n    } = event;\n    setToDos((oldToDos) => {\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      const newToDo = { text, id, category: name as any };\n      return [\n        ...oldToDos.slice(0, targetIndex),\n        newToDo,\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n    });\n  };\n  return (\n    <li>\n      <span>{text}</span>\n      {category !== Categories.DOING && (\n        <button name={Categories.DOING} onClick={onClick}>\n          Doing\n        </button>\n      )}\n      {category !== Categories.TO_DO && (\n        <button name={Categories.TO_DO} onClick={onClick}>\n          To Do\n        </button>\n      )}\n      {category !== Categories.DONE && (\n        <button name={Categories.DONE} onClick={onClick}>\n          Done\n        </button>\n      )}\n    </li>\n  );\n}\n\nexport default ToDo;\n","import React, { useState } from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport {\n    Categories,\n    categoryState,\n    customCategoryState,\n    toDoSelector,\n} from \"../atoms\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./ToDo\";\n\nfunction CustomCategory() {\n    const [customCategories, setCustomCategories] =\n        useRecoilState(customCategoryState);\n    const [newCategory, setNewCategory] = useState(\"\");\n    const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setNewCategory(event.target.value);\n    };\n    const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        setCustomCategories([...customCategories, newCategory]);\n        setNewCategory(\"\");\n    };\n    return (\n        <div>\n            <h2>Custom Categories</h2>\n            <form onSubmit={onSubmit}>\n                <input\n                    type=\"text\"\n                    value={newCategory}\n                    onChange={onInputChange}\n                    placeholder=\"Add a category\"\n                />\n                <button type=\"submit\">Add</button>\n            </form>\n        </div>\n    );\n}\n\nfunction ToDoList() {\n    const toDos = useRecoilValue(toDoSelector);\n    const [category, setCategory] = useRecoilState(categoryState);\n    const customCategories = useRecoilValue(customCategoryState);\n    const onCategoryChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        const value = event.target.value as Categories;\n        if (customCategories.includes(value)) {\n            setCategory(value);\n        } else {\n            setCategory(value as any);\n        }\n    };\n    return (\n        <div>\n            <h1>To Do List</h1>\n            <hr />\n            <select value={category} onChange={onCategoryChange}>\n                <option value={Categories.TO_DO}>To Do</option>\n                <option value={Categories.DOING}>Doing</option>\n                <option value={Categories.DONE}>Done</option>\n                {customCategories.map((category) => (\n                    <option key={category} value={category}>\n                        {category}\n                    </option>\n                ))}\n            </select>\n            <CreateToDo />\n            <CustomCategory />\n            {toDos?.map((toDo) => (\n                <ToDo key={toDo.id} {...toDo} />\n            ))}\n        </div>\n    );\n}\n\nexport default ToDoList;\n","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <RecoilRoot>\n            <ThemeProvider theme={darkTheme}>\n                <App />\n            </ThemeProvider>\n        </RecoilRoot>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"white\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"transparent\",\n};\n"],"sourceRoot":""}